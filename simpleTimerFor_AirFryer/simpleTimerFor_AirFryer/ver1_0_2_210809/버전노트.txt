=======================================================================================

[ 버전 1.0.2 최종 수정일 - 210809 ]
=======================================================================================
추가기능 : 앱 밖으로 나가거나 다른 앱을 사용중일 때도 타이머가 완료되면 알람(Local Push)을 보냅니다.


[ 버전 1.0.1 최종 수정일 - 210724 ]
=======================================================================================
//////////// [ 화면별 구현기능 설명 ] ////////////

1. 앱 실행 대기화면
- pdf 파일 사용(vector형식)하여 icon scale을 단일로 통일
- 앱이 구동되는 동안 런치스크린이 빈 화면 대신 보여지도록 구현


2. 탭뷰 1 - 타이머 추가 --------------------------------------------------------- (Create)
- 텍스트필드의 필수 입력값 유효성 검사
[필수] : 이름, 온도 
	※ 테스트 모드 : 이름에 test입력 시 타이머가 3초 뒤 종료 
	(타이머 알림창 실행의 빠른 확인을 위해)

[조건부 확인] 시간과 분이 둘 다 0인지 여부
[선택적 기본값] 음식분류 미선택 시 기본 값을 '기타'로 자동 설정


3. 탭뷰 2 - 전체 타이머 보기
- 탭뷰1에서 추가한 타이머와 설정 탭의 외부 서버에서 받은 샘플 타이머를 종합하여 볼 수 있도록 구현 -- (Read)

- 각 Cell의 수정버튼 클릭 시 해당타이머(indexpath.item)의 정보 수정기능 ----------------- (Update)
  모달창 형태로 수정화면을 띄우고, 수정완료 후 모달창이 dismiss되는 시점에서 
  돌아가는 화면의 타이머데이터 갱신 (collectionview.reload(), Notification 활용)

- 각 Cell의 삭제버튼 클릭 시 해당타이머(indexpath.item)의 정보 삭제기능 ----------------- (Delete)
- UISwitch클릭에 따른 설명문구 변경 - '타이머 켜기/끄기'
- UISwitch 상태(켜고 끔)에 따른 타이머, 알림기능(Alert) 


4. 탭뷰 3 - 설정창

- 서버에서 샘플 받기
  - Firebase를 통해 외부 서버 구축없이 외부 json파일을 다운. (Read-only) 
  - Codable 프로토콜을 준수하여 서버의 json파일을 struct로 파싱 및 기기 내 데이터로 저장

- 타이머 전체 삭제 
  - 기기에 저장되어 있는 'foods.json'파일의 오브젝트를 빈 배열로 초기화


5. 기타 

1. MVVM 디자인패턴
- 각 CRUD작업에 따른 실시간 파일 동기화
- mvvm 모델을 활용하여 재사용성이 높은 코드 작성

Model(데이터)     : Struct(Food) - 각 타이머의 정보를 저장할 모델 구조체
View(UI요소)     : UIView, UIViewController
VIewModel(중계자) : 

[ Model <-> ViewModel <-> View ]

- Model -> ViewModel : 값 변경 시 알림 
- Model <- ViewModel : 입력값 변경 시 모델에 접근하여 값 업데이트

- ViewModel -> View  : 모델에 접근하여 가지고 있는 값을 뷰와 바인딩
- ViewModel <- View  : 뷰에서 값의 변경이 있을 때 ViewModel을 통해 알림(=값의 변경이 필요하다)
  			
( 현재 앱에서 구현된 예시 ) 타이머 수정 모달창 - 음식유형 버튼 '채소, 빵, 해산물 등'이 클릭됐을 때
		       뷰모델에 알려주고, 뷰모델은 모델(데이터)에 접근하여 수정 및 다시 뷰에 업데이트



//////////// [느낀 점] ////////////

- 학원에서 배웠던 다른 언어에서는 UIViewController라는 개념이 없어서 
익숙해지기위해서 프로젝트 인터넷 강의를 전체 3번정도 돌려보고
필요할 때마다 검색해서 개념을 복습하다보니 무작정 따라하던 1회차때 보다는 많이 능숙해진 것 같다.
앱을 만들 때 어떤흐름으로 하는지 순서가 손에서 바로 나올 수 있도록 전체 인터넷 강의을 복습회차를 정하지 않고 복습해야겠다.

- 코드가 컴파일, 런타임 에러는 안나는데 구동되지 않을 때 혼자서 고민해보고 직접 해결됐을 때의 
뿌듯함이 개발하는 데 동기부여가 되었고, 에러가 나더라도 덜 당황할 자신이 생겼다.

- 블로그나 엑셀로 된 데이터를 Python을 통해 json으로 자동 파싱하는 것도 잘 해보면 가능하지 않을까?(웹 스크롤링??)




//////////// [업데이트 예정 기능] ////////////

 [버전관리]
 - [] 버전정보 강제 업데이트, 선택적 업데이트
 
 [타이머 반복]
 - [] 반복기능 - 타이머완료 후 앱 밖에서 알림창 실행
 - [] 반복기능 - 타이머 N번 실행 - 뒤집기 수가 1이상일 때
 
 [타이머]
 - [] 검색1 - 음식이름으로 자동완성(ㅋㅇㅋ : 케이크)
 - [] 검색2 - 연락처 앱처럼 좌, 우측에 인덱스 스크롤 시 바로 이동하는 기능 (ㄱ..ㅊ(스크롤) -> 치킨 이런식으로)
 - [] 정렬  - 음식이름 순, 추가순(foodId)